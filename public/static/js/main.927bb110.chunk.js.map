{"version":3,"sources":["NewLanguage.js","App.js","serviceWorker.js","index.js"],"names":["NewLanguage","baseURL","state","target","newLang","newValid","newError","createLanguage","_callee","e","_this$state","regenerator_default","a","wrap","_context","prev","next","preventDefault","_this","Swal","fire","title","allowOutsideClick","allowEscapeKey","allowEnterKey","onOpen","showLoading","axios","post","concat","duplicate","newName","props","toggle","get","text","t0","response","data","message","stop","this","validateNew","value","length","match","setState","_this2","react_default","createElement","Modal","isOpen","ModalHeader","Form","onSubmit","ModalBody","FormGroup","Label","Input","type","onChange","defaultValue","languages","map","lang","index","key","language_file","onBlur","invalid","onInput","FormFeedback","ModalFooter","Button","color","disabled","onClick","Component","App","isNewLang","version","toggleNewLang","getLanguages","_response$data","sent","version_no","openUpload","versionFileInput","click","uploadNewVersion","_callee2","event","formData","_context2","files","abrupt","validateFile","FormData","append","status","window","location","reload","file","errors","name","includes","push","html","join","Container","src_NewLanguage","className","ref","Row","Col","Card","CardHeader","CardBody","CardTitle","Table","language","scope","translation_done","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.927bb110.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormFeedback\r\n} from 'reactstrap';\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NewLanguage extends Component {\r\n    baseURL = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : '';\r\n    state = {\r\n        target: '',\r\n        newLang: '',\r\n        newValid: true,\r\n        newError: ''\r\n    };\r\n\r\n    createLanguage = async (e) => {\r\n        e.preventDefault();\r\n        const {target, newLang} = this.state;\r\n        Swal.fire({\r\n            title: 'Loading...',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            allowEnterKey: false,\r\n            onOpen: () => Swal.showLoading()\r\n        });\r\n        try {\r\n            await axios.post(`${this.baseURL}/api/langs`, {duplicate: target, newName: newLang});\r\n            this.props.toggle();\r\n            this.props.get();\r\n            Swal.fire({\r\n                title: 'Success',\r\n                text: 'Language ' + (this.state.target ? 'Duplicated' : 'Created') + ' Successfully'\r\n            });\r\n        } catch (e) {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: e.response.data.message\r\n            });\r\n        }\r\n    };\r\n\r\n    validateNew = (e) => {\r\n        if (!e.target.value.length) {\r\n            this.setState({newError: 'Language Name is Required'});\r\n            return false;\r\n        }\r\n        if (!e.target.value.match(/[a-z]{2}_[A-Z]{2}/)) {\r\n            this.setState({newError: 'Lanugage Name is invalid'});\r\n            return false;\r\n        }\r\n        this.setState({newError: ''});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.isOpen}>\r\n                <ModalHeader toggle={this.props.toggle}>Create New Language</ModalHeader>\r\n                <Form onSubmit={this.createLanguage}>\r\n                    <ModalBody>\r\n                        <FormGroup>\r\n                            <Label>Duplicate language(optional)</Label>\r\n                            <Input type=\"select\" onChange={e => this.setState({target: e.target.value})}\r\n                                   defaultValue={\"\"}>\r\n                                <option value=\"\"></option>\r\n                                {this.props.languages.map((lang, index) => (\r\n                                    <option key={index} value={lang.language_file}>{lang.language_file}</option>))}\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label>New Language</Label>\r\n                            <Input type=\"text\" onBlur={this.validateNew}\r\n                                   invalid={!!this.state.newError}\r\n                                   onInput={e => this.setState({newLang: e.target.value})}/>\r\n                            <FormFeedback>{this.state.newError}</FormFeedback>\r\n                        </FormGroup>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" type=\"submit\" disabled={!!this.state.newError}>Create</Button>\r\n                        <Button onClick={this.props.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nNewLanguage.propTypes = {\r\n    isOpen: PropTypes.bool,\r\n    toggle: PropTypes.func,\r\n    languages: PropTypes.array,\r\n    get: PropTypes.func\r\n};\r\n\r\nexport default NewLanguage;\r\n","import React, {Component} from 'react';\nimport {Container, Row, Col, Card, CardHeader, CardTitle, CardBody, Button, Table} from 'reactstrap';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport NewLanguage from \"./NewLanguage\";\n\nclass App extends Component {\n    baseURL = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : '';\n    versionFileInput;\n    state = {\n        languages: [],\n        isNewLang: false,\n        version: false\n    };\n\n    componentDidMount() {\n        // noinspection JSIgnoredPromiseFromCall\n        this.getLanguages();\n    }\n\n    toggleNewLang = () => {\n        this.setState({isNewLang: !this.state.isNewLang})\n    };\n\n    getLanguages = async () => {\n        const response = await axios.get(`${this.baseURL}/api?current`);\n        if (response.data) {\n            const {languages, version_no: version} = response.data;\n            this.setState({languages, version});\n        }\n    };\n\n    openUpload = () => {\n        this.versionFileInput.click();\n    };\n\n    uploadNewVersion = async (event) => {\n        if (!event.target.files[0]) {\n            return false;\n        }\n        if (!this.validateFile(event.target.files[0])) {\n            return false;\n        }\n        const formData = new FormData();\n        formData.append('file', event.target.files[0]);\n        Swal.fire({\n            title: 'Loading...',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            allowEnterKey: false,\n            onOpen: () => Swal.showLoading()\n        });\n        const response = await axios.post(`${this.baseURL}/api`, formData);\n        if (response.status) {\n            await this.getLanguages();\n            this.versionFileInput.value = '';\n            Swal.fire({\n                title: 'Success',\n                text: 'Version Updated Successfully',\n                type: 'success'\n            });\n            window.location.reload();\n        }\n\n    };\n\n    validateFile = (file: File) => {\n        const errors = [];\n        if (!file.name.includes('.json')) {\n            errors.push('Language File Must be a json file');\n        }\n        if (!file.name.match(/^[a-z]{2}_[A-Z]{2}/)) {\n            errors.push('Language file name is invalid');\n        }\n        if (errors.length) {\n            Swal.fire({\n                title: 'Error!',\n                html: errors.join('<br/>'),\n                type: 'error'\n            });\n            return false;\n        }\n        return true;\n    };\n\n    render() {\n        return (\n            <Container>\n                <NewLanguage isOpen={this.state.isNewLang} toggle={this.toggleNewLang} languages={this.state.languages}\n                             get={this.getLanguages}/>\n                <input type=\"file\" className=\"d-none\" ref={ref => this.versionFileInput = ref}\n                       onChange={this.uploadNewVersion}/>\n                <Row>\n                    <Col>\n                        <Card>\n                            <CardHeader>\n                                <Button color=\"primary\" className=\"mr-5\" onClick={this.toggleNewLang}>create new\n                                    language</Button>\n                                <Button color=\"primary\" onClick={this.openUpload}>Create new Language Version</Button>\n                            </CardHeader>\n                            <CardBody>\n                                {this.state.version ? <CardTitle>Version {this.state.version}</CardTitle> : null}\n                                <Table>\n                                    <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Language File</th>\n                                        <th>Translation Done</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {this.state.languages.map((language, index) => (\n                                        <tr key={index}>\n                                            <th scope=\"row\">{index + 1}</th>\n                                            <td>{language.language_file}</td>\n                                            <td>{language.translation_done ? 'Yes' : 'No'}</td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </Table>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}